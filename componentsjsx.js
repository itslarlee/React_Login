// Comentarios realizados por Andr칠 marcados al final con un 游꼮. Yeehaw.

class App extends React.Component {

    /* Ac치, tener cuidado, no es necesario explicar que hacen estructuras l칩gicas del lenguaje si lo que que buscas es
    documentar, por ejemplo, estos comentarios est치n bien si alguien no sabe qu칠 es una clase, pero en este caso ser칤a mejor 
    utilizar los comentarios para dar detalles de funcionalidades. En caso de que hicieras estos comentarios para ti mismo, 
    no hay problema, est치n bien. 游꼮 */
    constructor(props) { //Es el metodo de las clases que nos permiten construir datos, y el unico valor que toma son las propiedades. 
        super(props); //super es un metodo para quitar heredacion y que las propiedades de la clase React component no se le pase a nuestro componente
    }
    /* Ten cuidado con los espacios a la hora de programar ya que puede ser muuuy dif칤cil para las personas que lean tu c칩digo
    identificar donde inicia o termina algo. 游꼮 */
  
    render(){//metodo que nos dice que tenemos que mostrar
        return (
        <div>
            <PageTitle title="Register"/>
            <RegisterForm/>
        </div>
        )
    }
  
  
  }
  
  /* Considero que esto deber칤a llamarse FormTitle no PageTitle, una "PageTitle" ser칤a m치s para algo global, por ejemplo, si
  la idea es utilizar este componente en un futuro para algo, podr칤as confundir a quien lo est치 utilizando. 游꼮 */
  class PageTitle extends React.Component {
    constructor(props){
      super (props)
    } 
  
    render() {
      // Cuida los tabs.游꼮
      return(
        <div> 
          <h1>{this.props.title}</h1>
        </div>  
      )
    }
  
  }
  
  /* Disculpa si estoy siendo muy quisquilloso respecto a como introduzco mi pensamiento a React, pero, analicemos que
  los formularios podr칤as hacer esto no un REGISTER form si no un login/register form, ya que, podr칤as condicionar el renderizado con
  una propiedad que te indique si el formulario que necesitas renderizar es el de registro o el de ingreso y  si el bot칩n que debe de
  renderizar tendr치 que registrar o logear a la persona, la idea es empaquetar las funcionalidades lo mejor posible. 游꼮*/
  class RegisterForm extends React.Component{
    constructor(props){
      super(props);
    }
  
    render() {
      
      // El campo para contrase침a recuerda debe de ser una contrase침a, quiz치s deber칤as de pasar una propiedad que indique eso.
      return(
        <div>
            <InputTitle label="Name"/>
            <FormInput label="Name"/>
  
            <InputTitle label="Username"/>
            <FormInput label="Username"/>
  
            <InputTitle label="Email"/>
            <FormInput label="Email"/>
  
            <InputTitle label="Password"/>
            <FormInput label="Password"/> 
  
            <SubmitButton label="Register"/>
        </div>
      )
    }
  }
  
  class InputTitle extends React.Component {
    constructor(props) {
      super(props);
    }
  
    render() {
      return(
        <div>
          <p className="input-title">{this.props.label}</p>
        </div>
      )
    }
  }
  
  class FormInput extends React.Component {
    constructor(props) {
      super(props);
    }
  
    render() {
      return(
        <div><input type="text" className="form-input" placeholder={this.props.label}/></div>
      )
    }
  
  }
  
  /* Algo que me di cuenta y que es necesario para los Forms, es que necesitas manejar un estado de cada uno de los
  campos del form para luego sacar su contenido, de esta manera realmente no tenemos c칩mo referirnos a cada campo. 游꼮 */
  class SubmitButton extends React.Component {
    constructor(props) {
      super(props);
    }
    render() {
      return(
        <div><button>{this.props.label}</button></div>
      )
    }
  }


  // Buen trabajo Lee, me alegra saber que aplicas bien los conceptos t칠cnicos de React. 游꼮
  ReactDOM.render(<App/>, document.getElementById("app"));
  
  
  